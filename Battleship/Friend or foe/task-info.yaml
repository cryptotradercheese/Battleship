type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Coordinate.java
  visible: true
  text: |
    package battleship;

    public class Coordinate {
        private int row;
        private int column;

        public Coordinate(String coordinate) {
            char letter = coordinate.charAt(0);
            int number = Integer.parseInt(coordinate.replaceFirst(".", ""));

            if (letter < 'A' || letter > 'J' || number < 1 || number > 10) {
                throw new IllegalArgumentException("Illegal coordinate");
            }

            this.row  = letter - 'A';
            this.column = number - 1;
        }

        public Coordinate(int row, int column) {
            if (row < 0 || row > 9 || column < 0 || column > 9) {
                throw new IllegalArgumentException("Illegal coordinate");
            }

            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }
    }
  learner_created: true
- name: src/battleship/ShipType.java
  visible: true
  text: |
    package battleship;

    public enum ShipType {
        AIRCRAFT_CARRIER("Aircraft Carrier", 5),
        BATTLESHIP("Battleship", 4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        public final String name;
        public final int length;
        private Coordinate first;
        private Coordinate second;

        ShipType(String name, int length) {
            this.name = name;
            this.length = length;
        }

        public void setCoordinates(Coordinate first, Coordinate second) {
            if (
                    first.getRow() != second.getRow() && first.getColumn() != second.getColumn() ||
                    first.getRow() == second.getRow() && first.getColumn() == second.getColumn()
            ) {
                throw new IllegalArgumentException();
            }

            if (first.getRow() < second.getRow() || first.getColumn() < second.getColumn()) {
                this.first = first;
                this.second = second;
            } else {
                this.first = second;
                this.second = first;
            }
        }

        public boolean isSank(Field field) {
            for (int i = first.getRow(); i <= second.getRow(); i++) {
                for (int j = first.getColumn(); j <= second.getColumn(); j++) {
                    if (!field.getCell(new Coordinate(i, j)).contains(CellState.HIT_CELL)) {
                        return false;
                    }
                }
            }

            return true;
        }
    }
  learner_created: true
- name: src/battleship/Field.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;

    public class Field {
        private ArrayList<CellState>[][] field;

        public Field() {
            initField();
        }

        public void initField() {
            field = new ArrayList[10][10];

            for (int i = 0; i < field.length; i++) {
                for (int j = 0; j < field[0].length; j++) {
                    field[i][j] = new ArrayList<>();
                    field[i][j].add(CellState.FOG);
                }
            }
        }

        public ArrayList<CellState> getCell(Coordinate coordinate) {
            return field[coordinate.getRow()][coordinate.getColumn()];
        }

        public boolean isGameFinished() {
            if (
                    ShipType.AIRCRAFT_CARRIER.isSank(this) &&
                    ShipType.BATTLESHIP.isSank(this) &&
                    ShipType.SUBMARINE.isSank(this) &&
                    ShipType.CRUISER.isSank(this) &&
                    ShipType.DESTROYER.isSank(this)
            ) {
                return true;
            }

            return false;
        }

        @Override
        public String toString() {
            String fieldString = "  1 2 3 4 5 6 7 8 9 10";

            for (int i = 0; i < field.length; i++) {
                fieldString += System.lineSeparator() + (char) ('A' + i);

                for (int j = 0; j < field[0].length; j++) {
                    ArrayList<CellState> currentCell = field[i][j];

                    if (currentCell.contains(CellState.HIT_CELL)) {
                        fieldString += " " + CellState.HIT_CELL.symbol;
                    } else if (currentCell.contains(CellState.MISS)) {
                        fieldString += " " + CellState.MISS.symbol;
                    } else if (currentCell.contains(CellState.FOG)) {
                        fieldString += " " + CellState.FOG.symbol;
                    } else if (currentCell.contains(CellState.YOUR_SHIP)) {
                        fieldString += " " + CellState.YOUR_SHIP.symbol;
                    }
                }
            }

            return fieldString;
        }
    }
  learner_created: true
- name: src/battleship/CellState.java
  visible: true
  text: |-
    package battleship;

    public enum CellState {
        FOG('~'),
        YOUR_SHIP('O'),
        HIT_CELL('X'),
        MISS('M');

        public final char symbol;

        CellState(char symbol) {
            this.symbol = symbol;
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public class Ship {
        private Field field;

        public Ship(Field field) {
            this.field = field;
        }

        public void placeAbstractShip(Coordinate first, Coordinate second) {
            if (first.getRow() == second.getRow()) {
                for (
                        int i = Math.min(first.getColumn(), second.getColumn());
                        i <= Math.max(first.getColumn(), second.getColumn());
                        i++
                ) {
                    field.getCell(new Coordinate(first.getRow(), i)).add(CellState.YOUR_SHIP);
                }
            } else if (first.getColumn() == second.getColumn()) {
                for (
                        int i = Math.min(first.getRow(), second.getRow());
                        i <= Math.max(first.getRow(), second.getRow());
                        i++
                ) {
                    field.getCell(new Coordinate(i, first.getColumn())).add(CellState.YOUR_SHIP);
                }
            } else {
                throw new IllegalArgumentException("Illegal placement");
            }
        }

        public int getLength(Coordinate first, Coordinate second) {
            if (first.getRow() == second.getRow()) {
                return Math.abs(first.getColumn() - second.getColumn()) + 1;
            } else if (first.getColumn() == second.getColumn()) {
                return Math.abs(first.getRow() - second.getRow()) + 1;
            } else {
                throw new IllegalArgumentException();
            }
        }

        public boolean isLegalForm(Coordinate first, Coordinate second) {
            if (first.getRow() != second.getRow() && first.getColumn() != second.getColumn()) {
                return false;
            }

            return true;
        }

        public boolean isLegalRoom(Coordinate first, Coordinate second) {
            for (int i = Math.min(first.getRow(), second.getRow()) - 1; i <= Math.max(first.getRow(), second.getRow()) + 1; i++) {
                for (int j = Math.min(first.getColumn(), second.getColumn()) - 1; j <= Math.max(first.getColumn(), second.getColumn()) + 1; j++) {
                    if (i >= 0 && i <+ 9 && j >= 0 && j <= 9) {
                        if (field.getCell(new Coordinate(i, j)).contains(CellState.YOUR_SHIP)) {
                            return false;
                        }
                    }
                }
            }

            return true;
        }

        public boolean shoot(Coordinate coordinate) {
            if (field.getCell(coordinate).contains(CellState.YOUR_SHIP)) {
                field.getCell(coordinate).add(CellState.HIT_CELL);
                return true;
            } else {
                field.getCell(coordinate).add(CellState.MISS);
                return false;
            }
        }
    }
  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;
    import java.util.Scanner;

    public class Game {
        private Scanner scanner = new Scanner(System.in);
        private Field field = new Field();
        private Ship ship = new Ship(field);

        public void placeShip(ShipType shipType) {
            System.out.printf("Enter the coordinates of the %s (%d cells):", shipType.name, shipType.length);
            System.out.println();

            String[] coordinates = scanner.nextLine().split(" ");
            Coordinate first = new Coordinate(coordinates[0]);
            Coordinate second = new Coordinate(coordinates[1]);
            while (!canBePlaced(first, second, shipType)) {
                coordinates = scanner.nextLine().split(" ");
                first = new Coordinate(coordinates[0]);
                second = new Coordinate(coordinates[1]);
            }

            shipType.setCoordinates(first, second);
            ship.placeAbstractShip(first, second);

            System.out.println();
            System.out.println(revealAllShips());
        }

        public boolean canBePlaced(Coordinate first, Coordinate second, ShipType shipType) {
            if (!ship.isLegalForm(first, second)) {
                System.out.println("Error! Wrong ship location! Try again:");
                return false;
            } else if (ship.getLength(first, second) != shipType.length) {
                System.out.println("Error! Wrong length of the " + shipType.name + "! Try again:");
                return false;
            } else if (!ship.isLegalRoom(first, second)) {
                System.out.println("Error! You placed it too close to another one. Try again:");
                return false;
            }

            return true;
        }

        public void shoot() {
            String coord = scanner.nextLine();
            char letter = coord.charAt(0);
            int number = Integer.parseInt(coord.replaceFirst(".", ""));

            while (letter < 'A' || letter > 'J' || number < 1 || number > 10) {
                System.out.println("Error! You entered the wrong coordinates! Try again:");
                coord = scanner.nextLine();
                letter = coord.charAt(0);
                number = Integer.parseInt(coord.replaceFirst(".", ""));
            }

            boolean isHit = ship.shoot(new Coordinate(coord));
            showShellsOnly();
            System.out.println();

            if (isHit) {
                System.out.println("You hit a ship! Try again:");
            } else {
                System.out.println("You missed. Try again:");
            }
        }

        public String revealAllShips() {
            String fieldString = "  1 2 3 4 5 6 7 8 9 10";

            for (int i = 0; i < 10; i++) {
                fieldString += System.lineSeparator() + (char) ('A' + i);

                for (int j = 0; j < 10; j++) {
                    ArrayList<CellState> currentCell = field.getCell(new Coordinate(i, j));

                    if (currentCell.contains(CellState.HIT_CELL)) {
                        fieldString += " " + CellState.HIT_CELL.symbol;
                    } else if (currentCell.contains(CellState.MISS)) {
                        fieldString += " " + CellState.MISS.symbol;
                    } else if (currentCell.contains(CellState.YOUR_SHIP)) {
                        fieldString += " " + CellState.YOUR_SHIP.symbol;
                    } else if (currentCell.contains(CellState.FOG)) {
                        fieldString += " " + CellState.FOG.symbol;
                    }
                }
            }

            return fieldString;
        }

        public void showShellsOnly() {
            String fieldString = "  1 2 3 4 5 6 7 8 9 10";

            for (int i = 0; i < 10; i++) {
                fieldString += System.lineSeparator() + (char) ('A' + i);

                for (int j = 0; j < 10; j++) {
                    ArrayList<CellState> currentCell = field.getCell(new Coordinate(i, j));

                    if (currentCell.contains(CellState.HIT_CELL)) {
                        fieldString += " " + CellState.HIT_CELL.symbol;
                    } else if (currentCell.contains(CellState.MISS)) {
                        fieldString += " " + CellState.MISS.symbol;
                    } else if (currentCell.contains(CellState.FOG)) {
                        fieldString += " " + CellState.FOG.symbol;
                    }
                }
            }

            System.out.println(fieldString);
        }

        public void printField() {
            System.out.println(field);
        }

        public boolean isFinished() {
            return field.isGameFinished();
        }
    }
  learner_created: true
- name: src/battleship/AircraftCarrier.java
  visible: true
  learner_created: true
- name: src/battleship/Battleship.java
  visible: true
  learner_created: true
- name: src/battleship/ShipPlacer.java
  visible: true
  learner_created: true
- name: src/battleship/Submarine.java
  visible: true
  learner_created: true
- name: src/battleship/Cruiser.java
  visible: true
  learner_created: true
- name: src/battleship/Destroyer.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 10 Jul 2021 10:43:53 UTC
record: -1
